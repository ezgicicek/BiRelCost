let eq = {contra : (int X int) [max,1]-> bool, 0} in
fix find(x). Lam. lam l. caseL l of 
   nil =>  0
 | h::tl => if (eq (h, x)) then 1 else find x [] tl
,

let eq = {contra : (int X int) [min,1]-> bool, 0} in
fix find(x). Lam. lam l. caseL l of 
   nil =>  0
 | h::tl => if (eq (find x [] tl, 1)) then 1 else (if (eq (h,x)) then 1 else 0)

<= 0 : 

U (
int -> forall n [max, 0] :: size.
(list [n] int)  [max, 4 * n] -> int

, 
int [min,0]-> forall n [min, 0] :: size.
(list [n] int) [min,  4 * n] -> int)

