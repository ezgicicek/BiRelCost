let bsplit = 
{contra : B (unitR =>  
forall i; alpha. 
(list [i, alpha] U int) => exists beta :: size. { beta <= alpha }
 (list[cl(i / 2), beta] U int) X (list [fl(i / 2), alpha-beta] U int)), 0} in

let merge  = {contra :
B (U (unit -> ( (int X int) -> bool) -> forall n [max, 0] :: size. forall m [max, 0] :: size.
(list [n] int) -> (list[m] int) [max,  5*(n+m)] -> list [n+m] int, 
   unit [min,0]-> ( (int X int) [min,0]-> bool) [min,0]-> forall n [min, 0] :: size. forall m [min, 0] :: size.
(list [n] int) [min,0]-> (list[m] int) [min,  5*(min(n,m))] -> list [n+m] int))
 , 0} in

fix msort(z). lam f. Lam. Lam. lam l. caseL l of 
   nil   => nil
 | h::tl => caseL tl of 
   	    nil     => h::nil
	  | h'::tl' => let r = bsplit () [] [] l in
	    	       unpack r as y in
		       clet y as x in
		       let r1 = (msort () f [] [] (fst x)) in
		       let r2 = (msort () f [] [] (snd x)) in
	  	       merge () f [] [] r1 r2

<= 0 : 
B (unitR => (B (U ((int X int) [max,0]-> bool, (int X int) [min,0]-> bool))) =>
forall i; alpha.
(list [i, alpha] U int) [diff, sum(minpowlin (alpha, i), {0, cl(log (i))})] -> U (list [i] int)
)
